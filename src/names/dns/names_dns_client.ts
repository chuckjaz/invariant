import { normalizeCode } from "../../common/codes";
import { invalid } from "../../common/errors";
import { LookupResult, NamesClient } from "../names_client";
import { resolveTxt } from 'node:dns/promises'

// Random ID generated by randomBytes(32) from crypto
const DNS_CLIENT_ID = "87b25b601973cf3e7f2329b8e378f3f25fc344072ac530335b61bdd29a16a24c"
const INVARIANT_SLOT_PREFIX = "invariant-slot="
const INVARIANT_DATA_PREFIX = "invariant-data="
const TTL = 3000

export class NamesDnsClient implements NamesClient {
    async ping(): Promise<string | undefined> {
        return DNS_CLIENT_ID
    }

    async lookup(name: string): Promise<LookupResult> {
        const effectiveName = name.indexOf('.') >= 0 ? name : `${name}.local`
        const results = await resolveTxt(effectiveName)
        for (const result of results) {
            for (const entry of result) {
                if (entry.startsWith(INVARIANT_SLOT_PREFIX)) {
                    const effectiveAddress = normalizeCode(entry.substring(INVARIANT_SLOT_PREFIX.length))
                    if (effectiveAddress) {
                        return {
                            name: effectiveName,
                            address: effectiveAddress,
                            ttl: TTL,
                            slot: true,
                        }
                    }
                } else if (entry.startsWith(INVARIANT_DATA_PREFIX)) {
                    const effectiveAddress = normalizeCode(entry.substring(INVARIANT_DATA_PREFIX.length))
                    if (effectiveAddress) {
                        return {
                            name: effectiveName,
                            address: effectiveAddress,
                            ttl: TTL,
                        }
                    }

                }
            }
        }
        invalid(`Unable to resolve ${effectiveName}`, 404)
    }

    register(name: string, address: string, ttl?: number): Promise<void> {
        invalid("Cannot register DNS through this client", 404)
    }

    update(name: string, previous: string, address: string, ttl?: number): Promise<boolean> {
        invalid("Cannot update DNS through this client", 404)
    }
}